"""
The main, core program. A CLI program.

For now: whilst this is just a CLI program, you must edit any key settings with the file:
        C:\Potts' Software\Fortnite Exploit\fe-sett.ini
Changing this file is permitted, I'm not the best at efficient programming. Work away.

Written by Elliot Potts,
https://www.elliotpotts.me/
"""

import os
import time
import keyboard
import ConfigParser


local_settings = {
    'hotkey': None,
    'audio_mute': None,
    'space_delay': None,
    'bool_temp': None
}


cPar = ConfigParser.SafeConfigParser()


def spacer(amount):
    time.sleep(1)
    print("" * amount)


def settingsDigest():
    if os.path.isdir("C:\Potts' Software\Fortnite Exploit"):
        pass
    else:
        os.makedirs("C:\Potts' Software\Fortnite Exploit")

    os.chdir("C:\Potts' Software\Fortnite Exploit")

    if os.path.isfile("fe-sett.ini"):
        try:
            settRead = cPar.read("fe-sett.ini")
            local_settings['hotkey'] = cPar.get("settings", "Hotkey")
            local_settings['space_delay'] = cPar.get("settings", "ParachuteDelay")
        except:
            print(" [-] Error reading configuration file. Regenerating...")
            os.remove("fe-sett.ini")
            spacer(3)
            print(" [-] Configuration file removed. It will be regenerated when the application is next launched.")
            quit()
    else:
        cfgFile = open("fe-sett.ini", "w")
        cPar.add_section("settings")
        cPar.set("settings", "Hotkey", "V")
        cPar.set("settings", "ParachuteDelay", "0.5")
        cPar.write(cfgFile)
        cfgFile.close()
        settRead = cPar.read("fe-sett.ini")
        local_settings['hotkey'] = cPar.get("settings", "Hotkey")
        local_settings['space_delay'] = cPar.get("settings", "ParachuteDelay")


settingsDigest()


def startProgram(mode):
    print("Program activated. Press {} to activate glitch.".format(str(local_settings['hotkey'])))
    print("Press CTRL+C to TERMINATE the program. Release {} to stop the glitch.".format(str(local_settings['hotkey'])))
    spacer(2)
    if mode == 1:
        while True:
            # print("DBG: ACTV")
            if keyboard.is_pressed(local_settings['hotkey']):
                print("Activation key is pressed. Exploitin'.")
                keyboard.press_and_release('space')
            else:
                # print("DBG: ACTV3")
                pass
    elif mode == 2:
        while True:
            if keyboard.is_pressed(local_settings['hotkey']):
                print("Activation key is pressed. Exploitin'.")
                keyboard.press_and_release('space')
                time.sleep(float(local_settings['space_delay']))
    else:
        print(" [-] Invalid function call. Report this. Terminating.")
        quit()


def main():
    spacer(10)
    print("""Your settings are as follows:
1). Your hotkey is set to: {},
2). Your timed delay setting is: {}
You may change these values manually or by using the menu function.""".format(str(local_settings['hotkey']),
                                                                              str(local_settings['space_delay'])))
    spacer(10)

    if local_settings['audio_mute'].lower() == "false":
        local_settings['bool_temp'] = "True"
    elif local_settings['audio_mute'].lower() == "true":
        local_settings['bool_temp'] = "False"

    print("""Please chose a menu option to get started:
1). Modify Hotkey
2). Display settings
--------------------------------------
3). Start program with spam mode (can be either really useful or really bad, play around)
4). Start program with timed mode (custom wait period between each glider deploy, see the config file/settings)
--------------------------------------
5). Quit program""")
    try:
        getMenuChoice = int(raw_input(" >> Enter your choice: "))
    except ValueError:
        print("You have entered an invalid input.")
        main()

    if getMenuChoice == 1:
        print("Your hotkey is currently: {}, enter what you would like it to be changed to and press enter.".format(str(
            local_settings['hotkey']
        )))
        getHotKeyChange = raw_input("Enter your hotkey: ")
        cfgFile = open(r"C:\Potts' Software\Fortnite Exploit\fe-sett.ini", "w")
        cPar.set("settings", "Hotkey", getHotKeyChange)
        cPar.write(cfgFile)
        cfgFile.close()
        settRead = cPar.read(r"C:\Potts' Software\Fortnite Exploit\fe-sett.ini")
        local_settings['hotkey'] = cPar.get("settings", "Hotkey")

        print("Your hotkey has been changed to {} successfully.".format(str(local_settings['hotkey'])))
        print("Returning to the main menu...")
        spacer(10)
        main()
    elif getMenuChoice == 2:
        spacer(10)
        main()
    elif getMenuChoice == 3:
        startProgram(1)
    elif getMenuChoice == 4:
        startProgram(2)
    elif getMenuChoice == 5:
        print("Program is being terminated via menu choice. Bye!")
        spacer(10)
        quit()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print(" [-] The program has been manually terminated via the keyboard...")
